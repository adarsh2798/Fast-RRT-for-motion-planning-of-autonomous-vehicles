import math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from bicycle_model_car_STRAIGHT_traj_generator import *
terminal_positions=[(-1.967,5),(-0.934,5),(0.099,5),(1.967,5),(0.934,5),(5,5),(-5,5),(-4,5),(4,5),(-4.5,5),(5.5,5),(6,5),(6.5,5),(7,5),(8,5)  ,
                    (-5.5,5),(-6,5),(-6.5,5),(-7,5),(-8,5)  ,
                    (-1.967,2.5),(-0.934,2.5),(0.099,2.5),(1.967,2.5),(0.934,2.5),(5,2.5),(-5,2.5),(-4,2.5),(4,2.5),(-4.5,2.5),(5.5,2.5),(6,2.5)
                    ,(6.5,2.5),(7,2.5),(8,2.5)  ,
                    (-5.5,2.5),(-6,2.5),(-6.5,2.5),(-7,2.5),(-8,2.5)                  
                   ]


sf=0.7 #safety factor for car size collisons
# edges of obstacles and environment boundary
ob_edges=[  [(-2.78-sf, -7.95-sf),(-2.78-sf, -7.45+sf)] ,  [(-2.78-sf, -7.45+sf),(-1.28+sf,-7.45+sf)],  [(-1.28+sf,-7.45+sf),(-1.28+sf,-7.95-sf)],
        [(-1.28+sf,-7.95-sf),(-2.78-sf,-7.95-sf)],
         
         [(-0.54-sf, -1.98-sf),(-0.54-sf, -1.48+sf)] ,  [(-0.54-sf, -1.48+sf),(0.96+sf,-1.48+sf)],  [(0.96+sf,-1.48+sf),(0.96+sf,-1.98-sf)],
        [(0.96+sf,-1.98-sf),(-0.54-sf,-1.98-sf)],
         
         [(-2.92-sf, 3.62-sf),(-2.92-sf, 4.12+sf)] ,  [(-2.92-sf, 4.12+sf),(-1.42+sf,4.12+sf)],  [(-1.42+sf,4.12+sf),(-1.42+sf,3.62-sf)],
        [(-1.42+sf,3.62-sf),(-2.92-sf,3.62-sf)],
         
         [(-0.49-sf, 7.59-sf),(-0.49-sf, 8.09+sf)] ,  [(-0.49-sf, 8.09+sf),(1.01+sf,8.09+sf)],  [(1.01+sf,8.09+sf),(1.01+sf,7.59-sf)],
        [(1.01+sf,7.59-sf),(-0.49-sf,7.59-sf)],
         
         [(-3.43+sf,-10),(-3.43+sf,10)], [(1.49-sf,-10),(1.49-sf,10)]
                    ]

goal=[-1.7,9.5]
# Create a new figure and axis
fig, ax = plt.subplots(figsize=(6, 10))

# Create a black rectangular patch
ob1 = patches.Rectangle((-2.78,-7.95), 1.5, 0.5, linewidth=1, edgecolor='black', facecolor='black')
ob2 = patches.Rectangle((-0.54,-1.98), 1.5, 0.5, linewidth=1, edgecolor='black', facecolor='black')
ob3 = patches.Rectangle((-2.92,3.62), 1.5, 0.5, linewidth=1, edgecolor='black', facecolor='black')
ob4 = patches.Rectangle((-0.49,7.59), 1.5, 0.5, linewidth=1, edgecolor='black', facecolor='black')
start=patches.Circle((0,-9.5),radius=0.1,color='blue')
# Add the patch to the axis
ax.add_patch(ob1)
ax.add_patch(ob2)
ax.add_patch(ob3)
ax.add_patch(ob4)
ax.add_patch(start)


T=5
N=25
traj_set=[]
for t_p in terminal_positions:
      x_final=t_p[0]
      y_final=t_p[1]
      initial_values=[0,-9.5,90*np.pi/180,0,0,0]
      final_values=[x_final,y_final,90*np.pi/180,0,0,0]

      x_guess=t_d*(x_final)/T

      y_guess=t_d*(y_final)/T
      theta_guess=np.ones_like(x_guess)*(90*np.pi/180)
      delta_guess=np.zeros_like(x_guess)
      delta_dot_guess=np.ones((N,))*100000000000000000
      v_guess=np.ones((N,))*10000000000000

      initial_guess=np.concatenate((x_guess,y_guess,theta_guess,delta_guess,delta_dot_guess,v_guess))

      x_opt,y_opt,theta_opt,delta_opt,delta_dot_opt,v_opt,t_d=get_trajectory(initial_values,final_values,initial_guess)
      traj=[]
      for p in zip(x_opt,y_opt):
        traj.append((p[0],p[1]))
      traj_set.append(traj)

      #plt.plot(x_opt, y_opt, 'b', label='path')
      #plt.scatter(x_opt,y_opt)



roots=decomp_to_tree(traj_set)
trim_roots=trim_tree(roots,ob_edges)

for node in trim_roots:
 

  plt.plot(node.position[0],node.position[1],'ro', markersize=3)

  plt.plot(node.children[0].position[0],node.children[0].position[1],'ro', markersize=3)

  while(node.children[0]!=None):
    
  
      plt.plot([node.position[0],node.children[0].position[0]],[node.position[1],node.children[0].position[1]],'b-')
      plt.plot(node.children[0].position[0],node.children[0].position[1],'ro', markersize=3)
      node=node.children[0]



def find_nearest_node(goal, root):
    min_dist = float('inf')
    q_near = None
    
    def dfs_search(node):
        nonlocal min_dist, q_near
        if  node==None:
            return
        
        curr_dist=((goal[0]-node.position[0])**2 + (goal[1]-node.position[1])**2)**0.5
        if curr_dist< min_dist:
            min_dist = curr_dist
            q_near = node
        
        for child in node.children:
            dfs_search(child)
    
    dfs_search(root)
    return q_near



    


x_min=-3
x_max=1
y_min=-10
y_max=10
q_near=(trim_roots[0].position[0],trim_roots[0].position[1])
node_near=trim_roots[0]
K=1000
for k in range(K):

  r=np.random.uniform(0,1)
  if(r>0.3):
    q_near=(trim_roots[0].position[0],trim_roots[0].position[1])
    node_near=trim_roots[0]
    x_rand=np.random.uniform(x_min,x_max)
    y_rand=np.random.uniform(y_min,y_max)
    q_rand=(x_rand,y_rand)
    min_dist=math.inf
    near_nodes_list=[]
    for t_r in trim_roots:
          q_near=find_nearest_node(q_rand,t_r)
          near_nodes_list.append(q_near)

    """
     while (t_r!=None):
      curr_dist=((q_rand[0]-t_r.position[0])**2 + (q_rand[1]-t_r.position[1])**2)**0.5
      if(curr_dist<min_dist):
        q_near=(t_r.position[0],t_r.position[1])
        node_near=t_r
      t_r=t_r.children[0]
      min_dist=min(curr_dist,min_dist)
      """

    min_dist=math.inf
    q_near=near_nodes_list[0]
    for n in near_nodes_list:
      curr_dist=((q_rand[0]-n.position[0])**2 + (q_rand[1]-n.position[1])**2)**0.5
      if(curr_dist<min_dist):
        min_dist=curr_dist
        q_near=n
    node_near=q_near
    q_near=(q_near.position[0],q_near.position[1])
    
    point_to_insert=np.array(np.array([[q_near[0]],[q_near[1]]])+0.1*(-np.array([[q_near[0]],[q_near[1]]])+np.array([[x_rand],[y_rand]])))
    trim_roots,extended=extend_tree(point_to_insert,node_near,trim_roots,ob_edges)
    if(extended):
      plt.plot([q_near[0],point_to_insert[0]],[q_near[1],point_to_insert[1]],'g-')
      plt.plot(point_to_insert[0],point_to_insert[1],'ro',markersize=3)
      x=2 
  else:
    min_dist=math.inf
    cnt=0
    q_near=(trim_roots[0].position[0],trim_roots[0].position[1])
    node_near=trim_roots[0]
    # finding point closest to goal in current RRT
    near_nodes_list=[]
    for node in trim_roots:
          q_near=find_nearest_node(goal,node)
          near_nodes_list.append(q_near)
    """
      while(node!=None):
         curr_dist=((goal[0]-node.position[0])**2 + (goal[1]-node.position[1])**2)**0.5
         if(curr_dist<min_dist):
          q_near=(node.position[0],node.position[1])
          node_near=node
         node=node.children[0]
         min_dist=min(curr_dist,min_dist)
      """
    min_dist=math.inf
    q_near=near_nodes_list[0]
    for n in near_nodes_list:
      curr_dist=((goal[0]-n.position[0])**2 + (goal[1]-n.position[1])**2)**0.5
      if(curr_dist<min_dist):
        min_dist=curr_dist
        q_near=n
    node_near=q_near
    q_near=(q_near.position[0],q_near.position[1])
    if( ((q_near[0]-goal[0])**2 +(q_near[1]-goal[1])**2)**0.5<0.1):
      break
    #print(q_near,node_near)
    trim_roots,x_opt_trim,y_opt_trim=rush_towards_goal(q_near,node_near,goal,trim_roots,ob_edges) 
    plt.plot(x_opt_trim, y_opt_trim, 'b', label='path')
    #for xy in zip(x_opt_trim,y_opt_trim):
     # plt.plot(xy[0],xy[1],'ro',markersize=3)



print(k)
   




ax.set_xlim(-3.43,1.49)
ax.set_ylim(-10, 10)

# Display the plot
plt.show()

