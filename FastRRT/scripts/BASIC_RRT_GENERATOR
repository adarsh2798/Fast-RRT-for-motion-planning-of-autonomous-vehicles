import matplotlib.pyplot as plt
import numpy as np
import matplotlib.animation as animation
import random
import math


q_start=(0.5,0.5)


# in this animation line is a sequence of x,y points, so animation draw line through hat x,y seq in that order, it is in form x_data,y_data np.ndARRAY
def update_RRT(num, line):
    
   
   
    x_data, y_data = line.get_data() # current x,y seq

    x_data=list(x_data)
    y_data=list(y_data)
    if len(x_data) == 0 or len(y_data) == 0:
        x_data.append(q_start[0])
        y_data.append(q_start[1])
    

    
   
    # new samples for RRT
    new_x=np.random.uniform(0,1) 
    new_y=np.random.uniform(0,1)
    
    min_dist=math.inf
    cnt=0
    min_index=0
    # finding point closest to new sample in current RRT
    for p in zip(x_data,y_data):
      curr_dist=((new_x-p[0])**2 + (new_y-p[1])**2)**0.5
      
      
      if(curr_dist<min_dist):
        min_index=cnt
      min_dist=min(curr_dist,min_dist)
      cnt+=1
    closest_point=(x_data[min_index],y_data[min_index])
    step_size=0.2 #step_size to grow branch
    # new point to insert in tree is just the vector addition of closest point and step size times position vector b/w new and closest point
    point_to_insert=np.array([[closest_point[0]],[closest_point[1]]])+step_size*(-np.array([[closest_point[0]],[closest_point[1]]])+np.array([[new_x],[new_y]]))


    # as mentioned above, animation draws line through the seq in that order, so to add anew branch we initally add new node after th closest point,
    # i.e min_index+1, but we again have to add closest point after new node, coz else tha animation will connect this new node to next new node in next iter
    # SEE:  WHAT ANIATION DOES IS DRAWS LINES THROUGH X,Y IN THAT SPECIFIED ORDER, SO IMAGINE A RRT, WITH RANDOM BRANCHS AT RANDOM NODES.  
    # HOW  WOULD YOU TRACE IT WITH YOUR HAND, OBVIO WE NEED TO GO TO SOME RANDOM LEAF THROUGH S ERIES OF BRANCHES AND SINCE WE REACH END
    # WE HAVE TO BACKTRACT TO MOVE TO NEXT BRANCH. TO BACKTRACK WE NEED THE PREVIOUS POINT RIGHT? THIS PREV POINT IS THE CLOSEST POINT TO
    # THE NEW NODE ADDED EVERY ITERATIONA AND HENCE WE HAVE TO AGAIN ADD THAT PREV/CLOSEST POINT AFTER NEW NODE FOR BACKTRACKING 
    
    x_data.insert(min_index+1,float(point_to_insert[0]))
    y_data.insert(min_index+1,float(point_to_insert[1]))
    x_data.insert(min_index+2,closest_point[0])
    y_data.insert(min_index+2,closest_point[1])




    
    
 
    x_data=np.array(x_data)
    y_data=np.array(y_data)
     
    line.set_data(x_data, y_data)

    # Return the updated line object
    
    return line,

# Create a figure and axis
fig, ax = plt.subplots()

# Set the axis limits
ax.set_xlim(0, 1)
ax.set_ylim(0, 1)

# Create the initial line segment
line, = ax.plot([], [], 'r-')

# Create the animation
ani = animation.FuncAnimation(fig, update_RRT, frames=np.arange(0, 10, 0.1),
                              fargs=(line,), interval=10, blit=True)

FFMpegWriter=animation.writers['ffmpeg']
writer=animation.FFMpegWriter()

ani.save("temp.mp4",writer=writer)
import numpy as np
class edge:
  def __init__(self,start,end):  #start,end are point class objects
    self.start=start
    self.end=end
class vertex:
  def __init__(self,x,y):
    self.x=x
    self.y=y



# this function checks if a segment intersects with any of the obsyacles with environment, specifically , an intersection happens if atleast one
# edge of the polygonal obstacles intersects with the segment. This intersection is checked by: if segment is defined by (S2,E2) and each obstcale edge
# by (S1,E1), then if those 2 lines intersects, then we have: S1+t1*(E1-S1)=S2+t2*(E2-S2), we solve for t1,t2 by wriitg this eqn in a compact matrix form
#if t1 and t2 are within 0,1 then point lies in between or at extremes of obstacles edges in whcih case COLLSION/INTERSECTION happens
# for simpicity each edge and vertex is treated as an object of that class as defined above
# obstacles_edges is a list of edges defiend as [(x1,y1),(x2,y2)]
def inter_obstacle(obstacle_edges,segment):
  edges_object=[edge(vertex(e[0][0],e[0][1]), vertex(e[1][0],e[1][1])) for e in obstacle_edges ]
  flag=False
  for e_o in edges_object:
    S1=np.array([ [e_o.start.x],[e_o.start.y]   ])
    E1=np.array([ [e_o.end.x],[e_o.end.y]   ])
    S2=np.array([  [segment.start.x], [segment.start.y] ])
    E2=np.array([  [segment.end.x], [segment.end.y] ])
    
    A=np.array(  [ [  -(E1[0,0]-S1[0,0])  , (E2[0,0]-S2[0,0])      ] , [-(E1[1,0]-S1[1,0])  , (E2[1,0]-S2[1,0])] ]   )
    B=S1-S2
    t=np.matmul(np.linalg.inv(A),B)
    
    
    if 0<=t[0,0]<=1 and 0<=t[1,0]<=1:
      flag=True
      
  return flag
